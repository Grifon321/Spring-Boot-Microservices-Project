services:
  # Spring Boot applications
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - app-network
    restart: unless-stopped

  task-service:
    build:
      context: ./task-service
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=admin
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    ports:
      - "8084:8084"
    networks:
      - app-network
    depends_on:
      - postgres
      - kafka
    restart: unless-stopped

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=admin
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    ports:
      - "8082:8082"
    networks:
      - app-network
    depends_on:
      - postgres
    restart: unless-stopped

  authentication-service:
    build:
      context: ./authentication-service
      dockerfile: Dockerfile
    environment:
      - USER_SERVICE_ADRESS=http://user-service:8082/users
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    ports:
      - "8083:8083"
    networks:
      - app-network
    depends_on:
      - user-service
    restart: unless-stopped

  elasticsearch-service:
    build:
      context: ./elasticsearch-service
      dockerfile: Dockerfile
    environment:
      - TASK_SERVICE_ADRESS=http://task-service:8084/tasks
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
    ports:
      - "8085:8085"
    networks:
      - app-network
    depends_on:
      - kafka
      - elasticsearch
    restart: unless-stopped

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    environment:
      - USER_SERVICE_URI=http://user-service:8082
      - AUTHENTICATION_SERVICE_URI=http://authentication-service:8083
      - TASK_SERVICE_URI=http://task-service:8084
      - ELASTICSEARCH_SERVICE_URI=http://elasticsearch-service:8085
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    ports:
      - "8081:8081"
    networks:
      - app-network
    depends_on:
      - user-service
      - authentication-service
      - task-service
      - elasticsearch-service
    restart: unless-stopped

  web-backend:
    build:
      context: ./web-backend
      dockerfile: Dockerfile
    environment:
      - API_GATEWAY_URL=http://api-gateway:8081
      #- SPRING_WEB_CORS_ALLOWED_ORIGINS=http://localhost:8080,http://web-frontend:8080
    ports:
      - "8089:8089"
    networks:
      - app-network
    depends_on:
      - api-gateway
    restart: unless-stopped

  web-frontend:
    build:
      context: ./web-frontend
      dockerfile: Dockerfile
    environment:
    - BACKEND_URL=http://localhost:8089
    # Following does not work since browser tries to access docker-url
    # but can not resolve it (since browser runs outside of docker)
    #- BACKEND_URL=http://web-backend:8089
    ports:
      - "8080:8080"
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL
  postgres:
    image: postgres:14-alpine #postgres:14-alpine - stable
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  #wurstmeister/kafka + zookeeper don't work in separate containers for some reason
  kafka:
    image: apache/kafka:latest 
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - "9092:9092"
    networks:
      - app-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.3 # stable version
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - network.host=0.0.0.0
      - ES_JAVA_OPTS=-Xms256m -Xmx1g #JVM Heap Size
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: